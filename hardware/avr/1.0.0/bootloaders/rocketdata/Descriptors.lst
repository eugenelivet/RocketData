   1               		.file	"Descriptors.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  11               	.global	CALLBACK_USB_GetDescriptor
  13               	CALLBACK_USB_GetDescriptor:
  14               	.LFB94:
  15               		.file 1 "Descriptors.c"
   1:Descriptors.c **** /*
   2:Descriptors.c ****              LUFA Library
   3:Descriptors.c ****      Copyright (C) Dean Camera, 2011.
   4:Descriptors.c **** 
   5:Descriptors.c ****   dean [at] fourwalledcubicle [dot] com
   6:Descriptors.c ****            www.lufa-lib.org
   7:Descriptors.c **** */
   8:Descriptors.c **** 
   9:Descriptors.c **** /*
  10:Descriptors.c ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Descriptors.c **** 
  12:Descriptors.c ****   Permission to use, copy, modify, distribute, and sell this
  13:Descriptors.c ****   software and its documentation for any purpose is hereby granted
  14:Descriptors.c ****   without fee, provided that the above copyright notice appear in
  15:Descriptors.c ****   all copies and that both that the copyright notice and this
  16:Descriptors.c ****   permission notice and warranty disclaimer appear in supporting
  17:Descriptors.c ****   documentation, and that the name of the author not be used in
  18:Descriptors.c ****   advertising or publicity pertaining to distribution of the
  19:Descriptors.c ****   software without specific, written prior permission.
  20:Descriptors.c **** 
  21:Descriptors.c ****   The author disclaim all warranties with regard to this
  22:Descriptors.c ****   software, including all implied warranties of merchantability
  23:Descriptors.c ****   and fitness.  In no event shall the author be liable for any
  24:Descriptors.c ****   special, indirect or consequential damages or any damages
  25:Descriptors.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Descriptors.c ****   in an action of contract, negligence or other tortious action,
  27:Descriptors.c ****   arising out of or in connection with the use or performance of
  28:Descriptors.c ****   this software.
  29:Descriptors.c **** */
  30:Descriptors.c **** 
  31:Descriptors.c **** /** \file
  32:Descriptors.c ****  *
  33:Descriptors.c ****  *  USB Device Descriptors, for library use when in USB device mode. Descriptors are special
  34:Descriptors.c ****  *  computer-readable structures which the host requests upon device enumeration, to determine
  35:Descriptors.c ****  *  the device's capabilities and functions.
  36:Descriptors.c ****  */
  37:Descriptors.c **** 
  38:Descriptors.c **** #include "Descriptors.h"
  39:Descriptors.c **** 
  40:Descriptors.c **** /** Device descriptor structure. This descriptor, located in SRAM memory, describes the overall
  41:Descriptors.c ****  *  device characteristics, including the supported USB version, control endpoint size and the
  42:Descriptors.c ****  *  number of device configurations. The descriptor is read out by the USB host when the enumeratio
  43:Descriptors.c ****  *  process begins.
  44:Descriptors.c ****  */
  45:Descriptors.c **** const USB_Descriptor_Device_t DeviceDescriptor =
  46:Descriptors.c **** {
  47:Descriptors.c **** 	.Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  48:Descriptors.c **** 
  49:Descriptors.c **** 	.USBSpecification       = VERSION_BCD(01.10),
  50:Descriptors.c **** 	.Class                  = CDC_CSCP_CDCClass,
  51:Descriptors.c **** 	.SubClass               = CDC_CSCP_NoSpecificSubclass,
  52:Descriptors.c **** 	.Protocol               = CDC_CSCP_NoSpecificProtocol,
  53:Descriptors.c **** 
  54:Descriptors.c **** 	.Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
  55:Descriptors.c **** 
  56:Descriptors.c **** 	.VendorID               = DEVICE_VID,
  57:Descriptors.c **** 	.ProductID              = DEVICE_PID,
  58:Descriptors.c **** 	.ReleaseNumber          = VERSION_BCD(00.01),
  59:Descriptors.c **** 
  60:Descriptors.c **** 	.ManufacturerStrIndex   = 0x02,
  61:Descriptors.c **** 	.ProductStrIndex        = 0x01,
  62:Descriptors.c **** 	.SerialNumStrIndex      = NO_DESCRIPTOR,
  63:Descriptors.c **** 
  64:Descriptors.c **** 	.NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
  65:Descriptors.c **** };
  66:Descriptors.c **** 
  67:Descriptors.c **** /** Configuration descriptor structure. This descriptor, located in SRAM memory, describes the usag
  68:Descriptors.c ****  *  of the device in one of its supported configurations, including information about any device in
  69:Descriptors.c ****  *  and endpoints. The descriptor is read out by the USB host during the enumeration process when s
  70:Descriptors.c ****  *  a configuration so that the host may correctly communicate with the USB device.
  71:Descriptors.c ****  */
  72:Descriptors.c **** const USB_Descriptor_Configuration_t ConfigurationDescriptor =
  73:Descriptors.c **** {
  74:Descriptors.c **** 	.Config =
  75:Descriptors.c **** 		{
  76:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DTYPE_
  77:Descriptors.c **** 
  78:Descriptors.c **** 			.TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
  79:Descriptors.c **** 			.TotalInterfaces        = 2,
  80:Descriptors.c **** 
  81:Descriptors.c **** 			.ConfigurationNumber    = 1,
  82:Descriptors.c **** 			.ConfigurationStrIndex  = NO_DESCRIPTOR,
  83:Descriptors.c **** 
  84:Descriptors.c **** 			.ConfigAttributes       = USB_CONFIG_ATTR_BUSPOWERED,
  85:Descriptors.c **** 
  86:Descriptors.c **** 			.MaxPowerConsumption    = USB_CONFIG_POWER_MA(100)
  87:Descriptors.c **** 		},
  88:Descriptors.c **** 
  89:Descriptors.c **** 	.CDC_CCI_Interface =
  90:Descriptors.c **** 		{
  91:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
  92:Descriptors.c **** 
  93:Descriptors.c **** 			.InterfaceNumber        = 0,
  94:Descriptors.c **** 			.AlternateSetting       = 0,
  95:Descriptors.c **** 
  96:Descriptors.c **** 			.TotalEndpoints         = 1,
  97:Descriptors.c **** 
  98:Descriptors.c **** 			.Class                  = CDC_CSCP_CDCClass,
  99:Descriptors.c **** 			.SubClass               = CDC_CSCP_ACMSubclass,
 100:Descriptors.c **** 			.Protocol               = CDC_CSCP_ATCommandProtocol,
 101:Descriptors.c **** 
 102:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 103:Descriptors.c **** 		},
 104:Descriptors.c **** 
 105:Descriptors.c **** 	.CDC_Functional_Header =
 106:Descriptors.c **** 		{
 107:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalHeader_t), .Type = DTYPE_
 108:Descriptors.c **** 			.Subtype                = 0x00,
 109:Descriptors.c **** 
 110:Descriptors.c **** 			.CDCSpecification       = VERSION_BCD(01.10),
 111:Descriptors.c **** 		},
 112:Descriptors.c **** 
 113:Descriptors.c **** 	.CDC_Functional_ACM =
 114:Descriptors.c **** 		{
 115:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalACM_t), .Type = DTYPE_CSI
 116:Descriptors.c **** 			.Subtype                = 0x02,
 117:Descriptors.c **** 
 118:Descriptors.c **** 			.Capabilities           = 0x04,
 119:Descriptors.c **** 		},
 120:Descriptors.c **** 
 121:Descriptors.c **** 	.CDC_Functional_Union =
 122:Descriptors.c **** 		{
 123:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalUnion_t), .Type = DTYPE_C
 124:Descriptors.c **** 			.Subtype                = 0x06,
 125:Descriptors.c **** 
 126:Descriptors.c **** 			.MasterInterfaceNumber  = 0,
 127:Descriptors.c **** 			.SlaveInterfaceNumber   = 1,
 128:Descriptors.c **** 		},
 129:Descriptors.c **** 
 130:Descriptors.c **** 	.CDC_NotificationEndpoint =
 131:Descriptors.c **** 		{
 132:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 133:Descriptors.c **** 
 134:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM),
 135:Descriptors.c **** 			.Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 136:Descriptors.c **** 			.EndpointSize           = CDC_NOTIFICATION_EPSIZE,
 137:Descriptors.c **** 			.PollingIntervalMS      = 0xFF
 138:Descriptors.c **** 		},
 139:Descriptors.c **** 
 140:Descriptors.c **** 	.CDC_DCI_Interface =
 141:Descriptors.c **** 		{
 142:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 143:Descriptors.c **** 
 144:Descriptors.c **** 			.InterfaceNumber        = 1,
 145:Descriptors.c **** 			.AlternateSetting       = 0,
 146:Descriptors.c **** 
 147:Descriptors.c **** 			.TotalEndpoints         = 2,
 148:Descriptors.c **** 
 149:Descriptors.c **** 			.Class                  = CDC_CSCP_CDCDataClass,
 150:Descriptors.c **** 			.SubClass               = CDC_CSCP_NoDataSubclass,
 151:Descriptors.c **** 			.Protocol               = CDC_CSCP_NoDataProtocol,
 152:Descriptors.c **** 
 153:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 154:Descriptors.c **** 		},
 155:Descriptors.c **** 
 156:Descriptors.c **** 	.CDC_DataOutEndpoint =
 157:Descriptors.c **** 		{
 158:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 159:Descriptors.c **** 
 160:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DIR_OUT | CDC_RX_EPNUM),
 161:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 162:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 163:Descriptors.c **** 			.PollingIntervalMS      = 0x01
 164:Descriptors.c **** 		},
 165:Descriptors.c **** 
 166:Descriptors.c **** 	.CDC_DataInEndpoint =
 167:Descriptors.c **** 		{
 168:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 169:Descriptors.c **** 
 170:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DIR_IN | CDC_TX_EPNUM),
 171:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 172:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 173:Descriptors.c **** 			.PollingIntervalMS      = 0x01
 174:Descriptors.c **** 		}
 175:Descriptors.c **** };
 176:Descriptors.c **** 
 177:Descriptors.c **** /** Language descriptor structure. This descriptor, located in SRAM memory, is returned when the ho
 178:Descriptors.c ****  *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit integer
 179:Descriptors.c ****  *  via the language ID table available at USB.org what languages the device supports for its strin
 180:Descriptors.c ****  */
 181:Descriptors.c **** const USB_Descriptor_String_t LanguageString =
 182:Descriptors.c **** {
 183:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 184:Descriptors.c **** 
 185:Descriptors.c **** 	.UnicodeString          = {LANGUAGE_ID_ENG}
 186:Descriptors.c **** };
 187:Descriptors.c **** 
 188:Descriptors.c **** /** Product descriptor string. This is a Unicode string containing the product's details in human r
 189:Descriptors.c ****  *  and is read out upon request by the host when the appropriate string ID is requested, listed in
 190:Descriptors.c ****  *  Descriptor.
 191:Descriptors.c ****  */
 192:Descriptors.c **** const USB_Descriptor_String_t ProductString =
 193:Descriptors.c **** {
 194:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(14), .Type = DTYPE_String},
 195:Descriptors.c ****     
 196:Descriptors.c ****     #if DEVICE_PID == 0x9212
 197:Descriptors.c ****     .UnicodeString          = L"RocketData    "
 198:Descriptors.c ****     #else
 199:Descriptors.c ****     .UnicodeString			= L"USB IO board  "
 200:Descriptors.c ****     #endif
 201:Descriptors.c **** };
 202:Descriptors.c **** 
 203:Descriptors.c **** const USB_Descriptor_String_t ManufNameString = 
 204:Descriptors.c **** {
 205:Descriptors.c **** 	.Header					= {.Size = USB_STRING_LEN(20), .Type = DTYPE_String},
 206:Descriptors.c ****     #if DEVICE_VID == 0x1B4D
 207:Descriptors.c ****     .UnicodeString			= L"RocketData"
 208:Descriptors.c ****     #else
 209:Descriptors.c ****     .UnicodeString			= L"Unknown             "
 210:Descriptors.c ****     #endif
 211:Descriptors.c **** };
 212:Descriptors.c **** 
 213:Descriptors.c **** /** This function is called by the library when in device mode, and must be overridden (see LUFA li
 214:Descriptors.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 215:Descriptors.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 216:Descriptors.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 217:Descriptors.c ****  *  USB host.
 218:Descriptors.c ****  */
 219:Descriptors.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 220:Descriptors.c ****                                     const uint8_t wIndex,
 221:Descriptors.c ****                                     const void** const DescriptorAddress)
 222:Descriptors.c **** {
  16               		.loc 1 222 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 223:Descriptors.c **** 	const uint8_t  DescriptorType   = (wValue >> 8);
  23               		.loc 1 223 0
  24 0000 292F      		mov r18,r25
  25 0002 30E0      		ldi r19,0
 224:Descriptors.c **** 	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 225:Descriptors.c **** 
 226:Descriptors.c **** 	const void* Address = NULL;
 227:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
 228:Descriptors.c **** 
 229:Descriptors.c **** 	switch (DescriptorType)
  26               		.loc 1 229 0
  27 0004 2230      		cpi r18,2
  28 0006 3105      		cpc r19,__zero_reg__
  29 0008 01F0      		breq .L3
  30 000a 2330      		cpi r18,3
  31 000c 3105      		cpc r19,__zero_reg__
  32 000e 01F0      		breq .L4
  33 0010 2130      		cpi r18,1
  34 0012 3105      		cpc r19,__zero_reg__
  35 0014 01F4      		brne .L9
 230:Descriptors.c **** 	{
 231:Descriptors.c **** 		case DTYPE_Device:
 232:Descriptors.c **** 			Address = &DeviceDescriptor;
 233:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  36               		.loc 1 233 0
  37 0016 82E1      		ldi r24,lo8(18)
  38 0018 90E0      		ldi r25,0
  39               	.LVL1:
 232:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  40               		.loc 1 232 0
  41 001a 20E0      		ldi r18,lo8(DeviceDescriptor)
  42 001c 30E0      		ldi r19,hi8(DeviceDescriptor)
  43 001e 00C0      		rjmp .L2
  44               	.LVL2:
  45               	.L3:
 234:Descriptors.c **** 			break;
 235:Descriptors.c **** 		case DTYPE_Configuration:
 236:Descriptors.c **** 			Address = &ConfigurationDescriptor;
 237:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  46               		.loc 1 237 0
  47 0020 8EE3      		ldi r24,lo8(62)
  48 0022 90E0      		ldi r25,0
  49               	.LVL3:
 236:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  50               		.loc 1 236 0
  51 0024 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  52 0026 30E0      		ldi r19,hi8(ConfigurationDescriptor)
  53               	.LVL4:
 238:Descriptors.c **** 			break;
  54               		.loc 1 238 0
  55 0028 00C0      		rjmp .L2
  56               	.LVL5:
  57               	.L4:
 239:Descriptors.c **** 		case DTYPE_String:
 240:Descriptors.c **** 			if (!(DescriptorNumber))
  58               		.loc 1 240 0
  59 002a 8823      		tst r24
  60 002c 01F0      		breq .L7
 241:Descriptors.c **** 			{
 242:Descriptors.c **** 				Address = &LanguageString;
 243:Descriptors.c **** 				Size    = LanguageString.Header.Size;
 244:Descriptors.c **** 			}
 245:Descriptors.c **** 			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
  61               		.loc 1 245 0
  62 002e 8130      		cpi r24,lo8(1)
  63 0030 01F0      		breq .L8
 246:Descriptors.c **** 			{
 247:Descriptors.c **** 				Address = &ProductString;
 248:Descriptors.c **** 				Size    = ProductString.Header.Size;
 249:Descriptors.c **** 			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
  64               		.loc 1 249 0
  65 0032 8230      		cpi r24,lo8(2)
  66 0034 01F4      		brne .L9
 250:Descriptors.c **** 			{
 251:Descriptors.c **** 				Address = &ManufNameString;
 252:Descriptors.c **** 				Size	= ManufNameString.Header.Size;
  67               		.loc 1 252 0
  68 0036 8AE2      		ldi r24,lo8(42)
  69 0038 90E0      		ldi r25,0
  70               	.LVL6:
 251:Descriptors.c **** 				Size	= ManufNameString.Header.Size;
  71               		.loc 1 251 0
  72 003a 20E0      		ldi r18,lo8(ManufNameString)
  73 003c 30E0      		ldi r19,hi8(ManufNameString)
  74               	.LVL7:
  75 003e 00C0      		rjmp .L2
  76               	.LVL8:
  77               	.L7:
 243:Descriptors.c **** 			}
  78               		.loc 1 243 0
  79 0040 84E0      		ldi r24,lo8(4)
  80 0042 90E0      		ldi r25,0
  81               	.LVL9:
 242:Descriptors.c **** 				Size    = LanguageString.Header.Size;
  82               		.loc 1 242 0
  83 0044 20E0      		ldi r18,lo8(LanguageString)
  84 0046 30E0      		ldi r19,hi8(LanguageString)
  85               	.LVL10:
  86 0048 00C0      		rjmp .L2
  87               	.LVL11:
  88               	.L8:
 248:Descriptors.c **** 			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
  89               		.loc 1 248 0
  90 004a 8EE1      		ldi r24,lo8(30)
  91 004c 90E0      		ldi r25,0
  92               	.LVL12:
 247:Descriptors.c **** 				Size    = ProductString.Header.Size;
  93               		.loc 1 247 0
  94 004e 20E0      		ldi r18,lo8(ProductString)
  95 0050 30E0      		ldi r19,hi8(ProductString)
  96               	.LVL13:
  97 0052 00C0      		rjmp .L2
  98               	.LVL14:
  99               	.L9:
 227:Descriptors.c **** 
 100               		.loc 1 227 0
 101 0054 80E0      		ldi r24,0
 102 0056 90E0      		ldi r25,0
 103               	.LVL15:
 226:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
 104               		.loc 1 226 0
 105 0058 20E0      		ldi r18,0
 106 005a 30E0      		ldi r19,0
 107               	.LVL16:
 108               	.L2:
 253:Descriptors.c **** 			}
 254:Descriptors.c **** 
 255:Descriptors.c **** 			break;
 256:Descriptors.c **** 	}
 257:Descriptors.c **** 
 258:Descriptors.c **** 	*DescriptorAddress = Address;
 109               		.loc 1 258 0
 110 005c FA01      		movw r30,r20
 111 005e 3183      		std Z+1,r19
 112 0060 2083      		st Z,r18
 259:Descriptors.c **** 	return Size;
 260:Descriptors.c **** }
 113               		.loc 1 260 0
 114 0062 0895      		ret
 115               		.cfi_endproc
 116               	.LFE94:
 118               	.global	ManufNameString
 119               		.section	.rodata
 122               	ManufNameString:
 123 0000 2A        		.byte	42
 124 0001 03        		.byte	3
 125 0002 5500      		.string	"U"
 126 0004 6E00      		.string	"n"
 127 0006 6B00      		.string	"k"
 128 0008 6E00      		.string	"n"
 129 000a 6F00      		.string	"o"
 130 000c 7700      		.string	"w"
 131 000e 6E00      		.string	"n"
 132 0010 2000      		.string	" "
 133 0012 2000      		.string	" "
 134 0014 2000      		.string	" "
 135 0016 2000      		.string	" "
 136 0018 2000      		.string	" "
 137 001a 2000      		.string	" "
 138 001c 2000      		.string	" "
 139 001e 2000      		.string	" "
 140 0020 2000      		.string	" "
 141 0022 2000      		.string	" "
 142 0024 2000      		.string	" "
 143 0026 2000      		.string	" "
 144 0028 2000      		.string	" "
 145 002a 00        		.string	""
 146 002b 00        		.string	""
 147               	.global	ProductString
 150               	ProductString:
 151 002c 1E        		.byte	30
 152 002d 03        		.byte	3
 153 002e 5500      		.string	"U"
 154 0030 5300      		.string	"S"
 155 0032 4200      		.string	"B"
 156 0034 2000      		.string	" "
 157 0036 4900      		.string	"I"
 158 0038 4F00      		.string	"O"
 159 003a 2000      		.string	" "
 160 003c 6200      		.string	"b"
 161 003e 6F00      		.string	"o"
 162 0040 6100      		.string	"a"
 163 0042 7200      		.string	"r"
 164 0044 6400      		.string	"d"
 165 0046 2000      		.string	" "
 166 0048 2000      		.string	" "
 167 004a 00        		.string	""
 168 004b 00        		.string	""
 169               	.global	LanguageString
 172               	LanguageString:
 173 004c 04        		.byte	4
 174 004d 03        		.byte	3
 175 004e 0904      		.word	1033
 176               	.global	ConfigurationDescriptor
 179               	ConfigurationDescriptor:
 180 0050 09        		.byte	9
 181 0051 02        		.byte	2
 182 0052 3E00      		.word	62
 183 0054 02        		.byte	2
 184 0055 01        		.byte	1
 185 0056 00        		.byte	0
 186 0057 80        		.byte	-128
 187 0058 32        		.byte	50
 188 0059 09        		.byte	9
 189 005a 04        		.byte	4
 190 005b 00        		.byte	0
 191 005c 00        		.byte	0
 192 005d 01        		.byte	1
 193 005e 02        		.byte	2
 194 005f 02        		.byte	2
 195 0060 01        		.byte	1
 196 0061 00        		.byte	0
 197 0062 05        		.byte	5
 198 0063 24        		.byte	36
 199 0064 00        		.byte	0
 200 0065 1001      		.word	272
 201 0067 04        		.byte	4
 202 0068 24        		.byte	36
 203 0069 02        		.byte	2
 204 006a 04        		.byte	4
 205 006b 05        		.byte	5
 206 006c 24        		.byte	36
 207 006d 06        		.byte	6
 208 006e 00        		.byte	0
 209 006f 01        		.byte	1
 210 0070 07        		.byte	7
 211 0071 05        		.byte	5
 212 0072 82        		.byte	-126
 213 0073 03        		.byte	3
 214 0074 0800      		.word	8
 215 0076 FF        		.byte	-1
 216 0077 09        		.byte	9
 217 0078 04        		.byte	4
 218 0079 01        		.byte	1
 219 007a 00        		.byte	0
 220 007b 02        		.byte	2
 221 007c 0A        		.byte	10
 222 007d 00        		.byte	0
 223 007e 00        		.byte	0
 224 007f 00        		.byte	0
 225 0080 07        		.byte	7
 226 0081 05        		.byte	5
 227 0082 04        		.byte	4
 228 0083 02        		.byte	2
 229 0084 1000      		.word	16
 230 0086 01        		.byte	1
 231 0087 07        		.byte	7
 232 0088 05        		.byte	5
 233 0089 83        		.byte	-125
 234 008a 02        		.byte	2
 235 008b 1000      		.word	16
 236 008d 01        		.byte	1
 237               	.global	DeviceDescriptor
 240               	DeviceDescriptor:
 241 008e 12        		.byte	18
 242 008f 01        		.byte	1
 243 0090 1001      		.word	272
 244 0092 02        		.byte	2
 245 0093 00        		.byte	0
 246 0094 00        		.byte	0
 247 0095 08        		.byte	8
 248 0096 4123      		.word	9025
 249 0098 4000      		.word	64
 250 009a 0100      		.word	1
 251 009c 02        		.byte	2
 252 009d 01        		.byte	1
 253 009e 00        		.byte	0
 254 009f 01        		.byte	1
 255               		.text
 256               	.Letext0:
 257               		.file 2 "/usr/local/Cellar/avr-gcc/4.9.3/avr/include/stdint.h"
 258               		.file 3 "/usr/local/Cellar/avr-gcc/4.9.3/lib/gcc/avr/4.9.3/include/stddef.h"
 259               		.file 4 "LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../StdDescriptors.h"
 260               		.file 5 "LUFA-111009/LUFA/Drivers/USB/Class/Device/../Common/CDC.h"
 261               		.file 6 "Descriptors.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Descriptors.c
/var/folders/3q/k8wxkc617931kmc7mm11b3gc0000gn/T//ccEwdkKR.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/3q/k8wxkc617931kmc7mm11b3gc0000gn/T//ccEwdkKR.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/3q/k8wxkc617931kmc7mm11b3gc0000gn/T//ccEwdkKR.s:4      *ABS*:000000000000003f __SREG__
/var/folders/3q/k8wxkc617931kmc7mm11b3gc0000gn/T//ccEwdkKR.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/3q/k8wxkc617931kmc7mm11b3gc0000gn/T//ccEwdkKR.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/3q/k8wxkc617931kmc7mm11b3gc0000gn/T//ccEwdkKR.s:13     .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor
/var/folders/3q/k8wxkc617931kmc7mm11b3gc0000gn/T//ccEwdkKR.s:240    .rodata:000000000000008e DeviceDescriptor
/var/folders/3q/k8wxkc617931kmc7mm11b3gc0000gn/T//ccEwdkKR.s:179    .rodata:0000000000000050 ConfigurationDescriptor
/var/folders/3q/k8wxkc617931kmc7mm11b3gc0000gn/T//ccEwdkKR.s:122    .rodata:0000000000000000 ManufNameString
/var/folders/3q/k8wxkc617931kmc7mm11b3gc0000gn/T//ccEwdkKR.s:172    .rodata:000000000000004c LanguageString
/var/folders/3q/k8wxkc617931kmc7mm11b3gc0000gn/T//ccEwdkKR.s:150    .rodata:000000000000002c ProductString

UNDEFINED SYMBOLS
__do_copy_data
